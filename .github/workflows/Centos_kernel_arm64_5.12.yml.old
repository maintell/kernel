#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# Description: Build Kernel using GitHub Actions
# Change from P3TERX
#

name: Centos Kernel ARM64 5.12

on:
  workflow_dispatch:
  #schedule:
    #- cron: "38 20 * * 1,4"
    #- cron: "39 20 * * *"
   # inputs:
     # ssh:
       # description: 'SSH connection to Actions'
       # required: false
       # default: 'false'

env:
  UPLOAD_DIR: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    container: docker.io/centos:7
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: intall deps
      run: |
        yum update -y
        yum install epel-release -y && yum install ansible -y && yum install openssh-clients -y
        yum install -y wget tar gcc automake autoconf libtool make zip unzip centos-release-scl scl-utils bzip2 wget curl jq htop sudo time patch
        yum groups install development -y
        yum install gcc bc ncurses-devel openssl-devel elfutils-libelf-devel rsync glibc-static tmux -y
        yum install https://yum.oracle.com/repo/OracleLinux/OL7/developer/x86_64/getPackage/cross-gcc-common-7.3.0-1.0.3.el7.noarch.rpm -y
        yum install https://yum.oracle.com/repo/OracleLinux/OL7/developer/x86_64/getPackage/gcc-aarch64-linux-gnu-7.3.0-1.0.3.el7.x86_64.rpm -y
        mkdir /github/home/.ssh/ && mkdir /workdir
        
    # - name: Check for updates  
      # id: check
      # run: |
        # github_tag=$(curl -s 'https://api.github.com/repos/ylx2016/kernel/releases' | grep 'Centos_Kernel' | grep '_latest_bbr_' | head -n 1 | awk -F '"' '{print $4}' | awk -F '[/]' '{print $8}')
        # github_ver=$(curl -s 'https://api.github.com/repos/ylx2016/kernel/releases' | grep ${github_tag} | grep 'rpm' | grep 'headers' | awk -F '"' '{print $4}' | awk -F '[/]' '{print $9}' | awk -F '[-]' '{print $3}')
        # kernel_ver=$(curl -s https://www.kernel.org/ | grep ' <a href="https://cdn.kernel.org/pub/linux/kernel/' | head -n 1 | awk -F '[>]' '{print $2}' | awk -F '[<]' '{print $1}')
        # echo "github_ver=" $github_ver
        # echo "kernel_ver=" $kernel_ver
        # if [[ $github_ver == *"$kernel_ver"* ]]; then
            # echo "::set-output name=status::fail"
        # else
            # echo "::set-output name=status::success"
        # fi     

    - name: Get source code
      id: code
      # if: steps.check.outputs.status == 'success'
      working-directory: /workdir
      run: |
        df -hT $PWD
        kernel_file=$(curl -s https://www.kernel.org/ | grep 'alt="Download"' | awk -F '"' '{print $2}')
        kernel_ver=$(curl -s https://www.kernel.org/ | grep ' <a href="https://cdn.kernel.org/pub/linux/kernel/' | head -n 1 | awk -F '[>]' '{print $2}' | awk -F '[<]' '{print $1}')
        wget -O kernel.tar.xz $kernel_file
        tar -Jxvf kernel.tar.xz -C /workdir && cd /workdir/linux-$kernel_ver
        echo "::set-output name=status::success"
        
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}         

    - name: Compile the kernel
      id: compile
      if: steps.code.outputs.status == 'success'
      working-directory: /workdir
      run: |
        kernel_ver=$(curl -s https://www.kernel.org/ | grep ' <a href="https://cdn.kernel.org/pub/linux/kernel/' | head -n 1 | awk -F '[>]' '{print $2}' | awk -F '[<]' '{print $1}')
        cd linux-$kernel_ver
        wget -O .config https://raw.githubusercontent.com/ylx2016/kernel/master/5.12.arm64.config
        sed -ri '/CONFIG_SYSTEM_TRUSTED_KEYS/s/=.+/=""/g' .config && scripts/config --disable MODULE_SIG && scripts/config --disable DEBUG_INFO
        echo -e "$(nproc) thread compile"
        ln -s /opt/rh/devtoolset-9/root/usr/bin/* /usr/local/bin/
        sudo time make -j$(nproc) rpm-pkg
        mv /root/rpmbuild/RPMS/* /workdir/upload
        echo "::set-output name=status::success"
        echo "FILE_DATE=Kernel_Centos_$kernel_ver_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        
    - name: Check space usage
      if: (!cancelled()) && steps.compile.outputs.status == 'success'
      run: df -hT

    - name: Upload
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_DIR == 'true'
      with:
        name: ${{ env.FILE_DATE }}
        path: /workdir/upload

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        kernel_ver=$(curl -s https://www.kernel.org/ | grep ' <a href="https://cdn.kernel.org/pub/linux/kernel/' | head -n 1 | awk -F '[>]' '{print $2}' | awk -F '[<]' '{print $1}')
        echo "::set-output name=release_tag::Centos_Kernel_${kernel_ver}_arm64_5.12_bbr_$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        echo "for centos 7" >> release.txt
        echo "::set-output name=status::success"

    - name: Upload kernel to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: /workdir/upload/*

    #- name: Delete workflow runs
    #  uses: GitRML/delete-workflow-runs@main
    #  with:
    #    retain_days: 1
    #    keep_minimum_runs: 3
